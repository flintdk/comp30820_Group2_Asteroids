package comp30820.group2.asteroids;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.canvas.Canvas;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.Control;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyEvent;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class AsteroidsFXMLController implements Initializable {

	// Our canvas is magically provided by JavaFX/FXML as long, of course, as
	// the .fxml has a canvas element whose fx:id matches the name!
	@FXML private Canvas asteroidsGameCanvas;
	@FXML private TextField playerNameTextField;
	@FXML private Label playerNameLabel;
	
	/** The initialize() method is called once on an implementing controller when
	 * the contents of its associated document have been completely loaded.  This
	 * allows the implementing class to perform any necessary post-processing on
	 * the content.
	 *
	 */
	public void initialize(URL url, ResourceBundle rb) {
//		String javaVersion = System.getProperty("java.version");
//		String javafxVersion = System.getProperty("javafx.version");
//		System.out.println("Environment: Java -> " + javaVersion + ", JavaFX -> " + javafxVersion);

		//System.out.println("initialiseCanvas: In the canvas");
		
		GameState gameState = GameState.getInstance();
		String playerName = gameState.getPlayername();
		System.out.print(playerName);
		
		
//		if (!playerName.isEmpty()) {
//			playerNameLabel.setText(playerName);				
//		}
		
		
		
		
		
//		if (playerName == null) {
//			
//		playerName = "Test";
//		playerNameLabel.setText(playerName);
//		System.out.print(playerName);
//		
//		}
//		else {
//			playerNameLabel.setText(playerName);
//		}
		asteroidsGameCanvas.setWidth(Configuration.SCENE_WIDTH);
		asteroidsGameCanvas.setHeight(Configuration.SCENE_HEIGHT);
		
		
		
		
	}

	//@Bryan
	// This is where the magic happens...between scenes. these methods are triggered
	// from within the FXML objects and this class is set as the controller for the
	// scenes.
	// Any queries about what anything does, drop me a line, pretty straightforward code once it works

	// We start with an ActionEvent (this method is handling an action event
	// generated by JavaFX, based on our .FXML configuration...

	// A series of .FXML anAction enpoints.  Essentially the following are a 
	// type of mapping, allowing us to connect multiple enpoints to a single
	// controller method, to avoid code duplication.
	public void asteroidsButtonClick(ActionEvent event) throws IOException {
		// Recover the stage from the event...
		Stage stage = (Stage)((Node)event.getSource()).getScene().getWindow();
		
		// The user has clicked a button... but which button?  We look at the id
		// of the element clicked to determine what to do...
		// ########################################################## Is there a better/proper way??
		String buttonId = ((Control)event.getSource()).getId();
		if (buttonId.equals("welcomeStartGame"))
		{
			// PICK UP TEXT FROM TEXT BOX AND STORE SOMEWHERE FOR LATER
			
			// Should the code be commented to allow the name to be passed through?
			
			Main.setCtrlResetGameState(true);
			System.out.print("HERE"); 
			activateScene(stage, Configuration.GameWindows.MAIN_GAME);
			
		}
		else if (buttonId.equals("endGameNewGame"))
		{
				Main.setCtrlResetGameState(true);
				activateScene(stage, Configuration.GameWindows.MAIN_GAME);
		}
		else if (buttonId.equals("endGameGoToMenu")) {
			activateScene(stage, Configuration.GameWindows.WELCOME_MAIN_MENU);			
		}
		//activateScene(Configuration.GameWindows.END_OF_GAME);
	}
	
	/**
	 * @param event
	 * @throws IOException
	 */
	public void playerNameTextField(KeyEvent event)
	throws IOException
	{
		String playerName = playerNameTextField.getText();

		//System.out.println(playerNameTextField.getText());
		String keyName = event.getCode().toString();
		if (keyName == "ENTER") {
			GameState gameState = GameState.getInstance();
			gameState.setPlayername(playerName);
			
			playerNameTextField.setVisible(false);
			playerNameLabel.setVisible(true);
			// Start scene
			playerNameLabel.setText("WELCOME " + playerName.toString());
			
		}

	}
	
	
	//#################################################################################
//	String username = nameTextField.getText();
//	String x = username.toString();
//	System.out.print(x);
	

	// We need access to the stage for changing scenes etc..
	// Our application only has one stage (window) and this will never change.
	// The stage (generated at application launch) is our main game window.
	// **********   Not sure if this is the best approach?? ???????

	protected void activateScene(Stage stage, Configuration.GameWindows window)
	throws IOException
	{
		//root = FXMLLoader.load(getClass().getResource("Scene1.fxml"));
		//stage = (Stage)((Node)event.getSource()).getScene().getWindow();
		//scene = new Scene(root);
		//stage.setScene(scene);
		//stage.show();
		
		// Code for access to everything relating to JavaFX.  This might not be
		// necessary - but for an abundance of caution...

		// @Bryan
		// Uncomment below to see the 3 screens directly, Both home and end menu
		// have buttons for switching but need to fix the game screen, issue with
		// ship and adding clickable feature

		//FXMLLoader loader = new FXMLLoader(getClass().getResource("asteroidsBorderPane.fxml"));
		FXMLLoader loader = new FXMLLoader(getClass().getResource(window.fxmlResource));
		//FXMLLoader loader = new FXMLLoader(getClass().getResource("endmenu.fxml"));

		Parent root = (Parent) loader.load();

		// Following line included just in case we need access to the controller...
		//AsteroidsFXMLController controller = loader.<AsteroidsFXMLController>getController();

		// If we're displaying a menu page we just chuck a new scene onto the stage,
		// but if we're going to the mainGame then we're careful to reuse the mainGameScene
		// which is created on application startup.
		Scene scene;
		if (window == Configuration.GameWindows.MAIN_GAME) {
//			String x1 = playerNameLabel.getText();
//			
//			System.out.print(x1);
//			playerNameLabel.setText(x1);
			
			
			
			GameState gameState = GameState.getInstance();
			String playerName = gameState.getPlayername();
//			playerNameLabel.setText(playerName.toString());
			System.out.print(playerName);
			
			scene = Main.getMainGameScene();
			
		}
		else {
			// Then we create a scene based on the FXML root...
			scene = new Scene(root);
		}
		KeyStrokeManager.getInstance().manageThisScene(scene);
		scene.getStylesheets().add(getClass().getResource("styles.css").toExternalForm());

		// Each stage has a scene (or scenes) and each scene requires a layout
		// manager.  The JavaFX SDK provides several layout panes for the easy
		// setup and management of classic layouts such as rows, columns, stacks,
		// tiles, and others.  Read more about the various options here:
		//   -> https://docs.oracle.com/javafx/2/layout/builtin_layouts.htm

		// Next we attach this scene to the stage (ours is 'stage'...)
		stage.setScene(scene);
		stage.show();
	}

	// Getters and Setters

	public Canvas getAsteroidsGameCanvas() {
		return asteroidsGameCanvas;
	}
	public void setAsteroidsGameCanvas(Canvas asteroidsGameCanvas) {
		this.asteroidsGameCanvas = asteroidsGameCanvas;
	}

}

//@Bryan
//GameState gameState = GameState.getInstance();
//String playerName = gameState.getPlayername();
//if (!playerName.isEmpty()) {
//	playerNameLabel.setText(playerName);				
//}